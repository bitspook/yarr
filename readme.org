* Yarr : Sidebar Controls and Models
Our sidebar is way too empty, let's add some controls to it.

** Sidebar Widgets

- *Post Filtering widget*

  Most RSS readers have ability to filter posts by "Read" and "Unread" (and "All"). Let's add that widget to our sidebar.

  Create a file: ~components/sidebar-filter-widget.js~

 #+begin_src javascript
  //components/sidebar-filter-widget.js

  import h from 'virtual-dom/h';
  import {Observable} from 'rx';

  let view = () =>
    <ul className="sidebar-controls">
      <li className="sidebar-control filter-posts data-filter-all">All</li>
      <li className="sidebar-control filter-posts active data-filter-unread">Unread</li>
      <li className="sidebar-control filter-posts data-filter-read">Read</li>
    </ul>
    ;

  let render_ = () =>
        Observable.return(view())

  export default render_;
 #+end_src

  We need to update our ~components/sidebar.js~ too:

 #+begin_src javascript
  //components/sidebar.js
  import {Observable} from 'rx';
  import h from 'virtual-dom/h';

  import filterWidget_ from './sidebar-feed-filter';

  let view = (filterWidget) =>
    <div className='sidebar-container'>
      <div className="sidebar-brand">
        <h2 className="sidebar-brand">Yarr</h2>
      </div>

      {filterWidget}
    </div>
  ;


  let render_ = () =>
    Observable
    .combineLatest(
      filterWidget_(),
      view
    );

  export default render_;
#+end_src

  *Interactivity in feed filter widget*

  Let's add some interactivity to our widget. We wanna switch the ~active~ class to the appropriate button on click.

#+begin_src javascript
  //components/sidebar-filter-widget.js
  import h from 'virtual-dom/h';
  import {Observable} from 'rx';

  import {clicksByClass_} from '../events';

  let view = () =>
    <ul className="sidebar-controls">
      <li className="sidebar-control filter-posts data-filter-all">All</li>
      <li className="sidebar-control filter-posts active data-filter-unread">Unread</li>
      <li className="sidebar-control filter-posts data-filter-read">Read</li>
    </ul>
    ;

  let render_ = () => {
    let widgetClicks_ = clicksByClass_('filter-posts');

    widgetClicks_
      .map(e => e.target)
      .do(el => {
        document.querySelector('.filter-posts.active').classList.remove('active');
        el.classList.add('active');
      })
      .subscribe(e => console.log(e));

    return Observable.return(view());
  }


  export default render_;
#+end_src

  We get the clicks Observable with ridiculously simple eventing system we setup earlier, and switch classes on the target element. Not we're not using jQuery for switching classes, because of which our code may not work on some older browsers. But you know what? Fuck it. We don't want to support older browsers, not in our play time at least.

- *Fetch Feeds and Add Feed widget*

  Let's add another widget, we might want to fetch our feeds at later time right? And we of course want to add new feeds.

  Create a file: ~components/sidebar-fetch-n-add-widget.js~

#+begin_src javascript
  //components/sidebar-fetch-n-add-widget.js
  import h from 'virtual-dom/h';
  import {Observable} from 'rx';

  let view = () =>
    <ul className="sidebar-controls">
      <li className="sidebar-control fetch-all-btn">Fetch All Feeds</li>

      <li className="sidebar-control new-feed-btn">Add New Feed
        <input className="new-feed-input" type="url" required />
      </li>
    </ul>
    ;

  let render_ = () =>
        Observable
        .return(view());

  export default render_;
#+end_src

  We also need to update ~components/sidebar.js~:

#+begin_src javascript
  //components/sidebar.js
  import {Observable} from 'rx';
  import h from 'virtual-dom/h';

  import filterWidget_ from './sidebar-feed-filter';
  import fetchNAddWidget_ from './sidebar-fetch-n-add-widget';

  let view = (filterWidget, fetchNAddWidget) =>
    <div className='sidebar-container'>
      <div className="sidebar-brand">
        <h2 className="sidebar-brand">Yarr</h2>
      </div>

      {filterWidget}
      {fetchNAddWidget}

    </div>


  let render_ = () =>
    Observable
    .combineLatest(
      filterWidget_(),
      fetchNAddWidget_(),
      view
    );

  export default render_;
#+end_src

  *Interactivity*

  Notice that we have an ~<input>~ field for adding a feed, but it has ~display: hidden~. We want to toggle it when we click ~Add New Feed~ button.

#+begin_src javascript
  import h from 'virtual-dom/h';
  import {Observable} from 'rx';

  import {clicksByClass_} from '../events';

  let view = (addFeedInputStyles) =>
    <ul className="sidebar-controls">
      <li className="sidebar-control fetch-all-btn">Fetch All Feeds</li>

      <li className="sidebar-control new-feed-btn">Add New Feed
        <input className="new-feed-input" style={addFeedInputStyles} type="url" required />
      </li>
    </ul>
    ;

  let render_ = () => {
    let addFeedBtnClicks_ = clicksByClass_('new-feed-btn');

    let addFeedInputStyles_ = addFeedBtnClicks_
          .startWith(false)
          .scan(acc => !acc)
          .map(show => show
               ? {display: 'inline-block'}
               : {display: 'none' });

    return Observable
      .combineLatest(
        addFeedInputStyles_,
        view
      );
  }

  export default render_;
#+end_src

  We could have simply toggled a class on our ~<input>~ field, but this is another way I wanted to demonstrate. Instead of toggeling classes in side-effect code, we can do it in more pure way like this. We create an Observable for inline-styles of the input block, and create an Observable which emits ~{display: 'none'}~ or ~{display: 'inline-block'}~ alternatively when user clicks the `Add New Feed` button. ~scan~ is similar to ~reduce~, Google it.

- *List of Subscribed Feeds*

  Now our sidebar don't feel empty. Are we missing something from UX perspective? A list of subsribed feeds would be a nice to have I guess? Or is it a must have? Must have it is.

  Create ~components/sidebar-feed-list.js~ file:

#+begin_src javascript
  //components/sidebar-feed-list.js
  import h from 'virtual-dom/h';
  import {Observable} from 'rx';

  let nodeView = (feed, extraClasses) =>
    <li className="sidebar-feedlist-item">
      <a className={extraClasses + ' sidebar-feed'} href={feed.url}>{feed.name}</a>
    </li>;


  let view = (feedViews) =>
    <ul className="sidebar-feedlist">
      {nodeView({url: 'all-feeds', name: 'All'}, 'active')}
      {feedViews}
    </ul>;

  let render_ = () => {
    let feeds_ = Observable
          .return([
            {name: 'Fake feed 1', url: '#'},
            {name: 'Fake feed 2', url: '#'},
            {name: 'Fake feed 3', url: '#'}
          ]);

    return feeds_
      .startWith([])
      .map(feeds => feeds.map(nodeView))
      .map(view);
  }

  export default render_;
#+end_src

  Notice we used fake feeds to quickly get done with the widget first. Let's also add some interactivity (change `active` class on feed change).

#+begin_src javascript
    .
    .
    let selectFeedClicks_ = clicksByClass_('sidebar-feed');
    selectFeedClicks_
      .do(e => e.preventDefault())
      .do(e => {
          let activeEl = document.querySelector('.sidebar-feed.active');
          if(activeEl) activeEl.classList.remove('active');

          e.target.classList.add('active');
      })
      .subscribe();

    return feeds_
    .
    .
    .
#+end_src

** Models
We are trying our best to keep the components isolated, but it won't always be possible/feasible to do so. Applications have state, that's their job. But we can keep our state properly so it won't create a mess around. Let's create Models to provide sane interface for our global state (/data).

What kind of data do an RSS reader have? RSS feeds, and posts that come along with them. Now we can keep both of them in same model (as we're doing till now), or we can separate them. We will separate them.

Create a directory: ~src/models~ and files ~src/models/feeds.js~ and =src/models/posts.js=. Delete ~src/feeds.js~ (or move it to models, your choice).

We will implement offline storage in next step. In this step, we're just marking our models into two files.

#+begin_src javascript
//models/feeds.js
import {Observable} from 'rx';
import {ajax} from 'jQuery';

let feedUrls = [
  'https://hacks.mozilla.org/category/es6-in-depth/feed/',
  'http://feeds.feedburner.com/JohnResig',
  'http://unisonweb.org/feed.xml'
];

let fetchFeed = (url) => {
  return ajax({
    url: `http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=30&q=${url}`,
    dataType: 'jsonp'
  }).promise();
};


let feeds_ = Observable
      .from(feedUrls)
      .flatMap(fetchFeed)
      .map(res => res.responseData.feed);

export default {feeds_};
#+end_src

#+begin_src javascript
//models/posts.js
import {feeds_} from './feeds';

let posts_ = feeds_
      .map(feed => feed.entries);

export default {posts_};
#+end_src

We didn't change much, just created ~posts_~ as a separate thing than ~feeds_~. We also need to update our ~components/posts-list.js~ to use ~posts_~.

#+begin_src javascript
//components/posts-list.js
import h from 'virtual-dom/h';
import {Observable} from 'rx';

import {posts_} from '../models/posts';
import {formatDate} from '../utils';

let postView = (post) =>
.
.
.
let render_ = () => {
  return posts_
    .map(posts => posts.map(postView))
    .reduce((acc, posts) => acc.concat(posts))
    .map(view);
}

export default render_;
#+end_src

We can also change the feeds-list sidebar component to use actual feeds. Let's just do it.

#+begin_src javascript
//components/sidebar-feed-list.js
import {feeds_} from '../models/feeds';
.
.
.
let render_ = () => {
return feeds_
    .map(feed => {
      return {url: feed.feedUrl, name: feed.title}
    })
    .toArray()
    .startWith([])
    .do(x => console.log(x))
    .map(feeds => feeds.map(nodeView))
    .map(view);
}

export default render_;
#+end_src

~Observable.prototype.toArray~ waits for the Observable to complete and return it as an array. We're not going to do it this way. We'll change all this later when we implement reactive offline storage.

At this point, the app shall be looking like this:

If it is not, you can always just put your code in trash and copy-over the code from whatever step from this repo :P

Time to move on to next step!

#+begin_src bash
git checkout 7-offline-storage-with-dexiejs
#+end_src
